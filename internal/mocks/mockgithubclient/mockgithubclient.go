// Copyright 2020-2024 the Pinniped contributors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: go.pinniped.dev/internal/githubclient (interfaces: GitHubInterface)
//
// Generated by this command:
//
//	mockgen -destination=mockgithubclient.go -package=mockgithubclient -copyright_file=../../../hack/header.txt go.pinniped.dev/internal/githubclient GitHubInterface
//

// Package mockgithubclient is a generated GoMock package.
package mockgithubclient

import (
	context "context"
	reflect "reflect"

	githubclient "go.pinniped.dev/internal/githubclient"
	gomock "go.uber.org/mock/gomock"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockGitHubInterface is a mock of GitHubInterface interface.
type MockGitHubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubInterfaceMockRecorder
}

// MockGitHubInterfaceMockRecorder is the mock recorder for MockGitHubInterface.
type MockGitHubInterfaceMockRecorder struct {
	mock *MockGitHubInterface
}

// NewMockGitHubInterface creates a new mock instance.
func NewMockGitHubInterface(ctrl *gomock.Controller) *MockGitHubInterface {
	mock := &MockGitHubInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubInterface) EXPECT() *MockGitHubInterfaceMockRecorder {
	return m.recorder
}

// GetOrgMembership mocks base method.
func (m *MockGitHubInterface) GetOrgMembership(arg0 context.Context) (sets.Set[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgMembership", arg0)
	ret0, _ := ret[0].(sets.Set[string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgMembership indicates an expected call of GetOrgMembership.
func (mr *MockGitHubInterfaceMockRecorder) GetOrgMembership(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgMembership", reflect.TypeOf((*MockGitHubInterface)(nil).GetOrgMembership), arg0)
}

// GetTeamMembership mocks base method.
func (m *MockGitHubInterface) GetTeamMembership(arg0 context.Context, arg1 sets.Set[string]) ([]*githubclient.TeamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembership", arg0, arg1)
	ret0, _ := ret[0].([]*githubclient.TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMembership indicates an expected call of GetTeamMembership.
func (mr *MockGitHubInterfaceMockRecorder) GetTeamMembership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembership", reflect.TypeOf((*MockGitHubInterface)(nil).GetTeamMembership), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockGitHubInterface) GetUserInfo(arg0 context.Context) (*githubclient.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*githubclient.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockGitHubInterfaceMockRecorder) GetUserInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockGitHubInterface)(nil).GetUserInfo), arg0)
}
